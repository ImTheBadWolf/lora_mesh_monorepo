pcap_file_header = [0xa1, 0xb2, 0xc3, 0xd4, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0e] #loratap 0x010e, find out what is the rest
frame_header = [0x61, 0x70, 0x2f, 0x6c, 0x00, 0x00, 0xb1, 0x3f, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1a] #0x1a => capture length, 0x1a => frame length

#header version, padding, header len (2bytes), frequency (4b), bandwidth (1b, multiples of 125khz), spreading factor, packet rssi, max rssi, current rssi, snr, syncword
lora_tap_header = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x64, 0x04, 0x08, 0x12, 0x34, 0x56, 0x78, 0x12]  #last byte is sync word, 0x34 => loraWan


payload1 = [0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64]
#actual payload from custom protocol. Data is encrypted
payload2 = [0xE6, 0x7E, 0xA0, 0x2C, 0x2A, 0x1E, 0x39, 0x63, 0xF1, 0xDD, 0x0, 0x0, 0x63, 0x5E, 0x2E, 0xF0, 0x5, 0xAD, 0x47, 0x30, 0x50, 0xD5, 0x56, 0xA6, 0xFF, 0xD4, 0xC0, 0x11, 0x0, 0xBD, 0x57, 0x9D, 0x25, 0xF8, 0x64, 0x4F, 0xD4, 0xD, 0xE4, 0x46, 0xAA, 0xD7, 0xA2, 0x8D]

def generate_message(payloadByteList):
  frame_h = frame_header.copy()
  frame_h[11] = len(payloadByteList) + 15
  frame_h[15] = len(payloadByteList) + 15
  msg = frame_h + lora_tap_header + payloadByteList
  return msg


msg1 = generate_message(payload1)
msg2 = generate_message(payload2)
b_arr = bytearray(pcap_file_header + msg1 + msg2+msg1+msg2)
with open('loratest.pcap', 'wb') as f:
    f.write(b_arr)